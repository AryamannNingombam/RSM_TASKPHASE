{"version":3,"sources":["pages/landing/LandingPage.jsx","features/counter/counterAPI.js","features/counter/counterSlice.js","constants.js","features/auth/AuthAPI.js","features/auth/AuthSlice.js","app/store.js","pages/login/LoginPage.jsx","pages/signup/SignUpPage.jsx","pages/homepage/HomePage.jsx","App.js","serviceWorker.js","index.js"],"names":["LandingPage","id","to","className","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","BACKEND_URL","SignInRequest","axios","post","headers","SignUpRequest","loggedIn","userData","token","SignInThunk","SignUpThunk","AuthSlice","logout","console","log","success","rejected","store","configureStore","reducer","counter","counterReducer","auth","AuthReducer","LoginPage","history","useHistory","useState","email","setEmail","password","setPassword","onButtonClick","e","preventDefault","dispatch","result","push","alert","onChange","target","placeholder","required","type","onClick","style","color","validationSchema","yup","shape","strict","min","password2","oneOf","formInitialValues","SignUpPage","initialValues","onSubmit","values","handleChange","handleBlur","handleSubmit","errors","touched","Form","Group","Control","onBlur","isInvalid","Feedback","Button","HomePage","AuthData","useSelector","App","isLoggedIn","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ccbecb5d.chunk.js","sourcesContent":["import React from 'react';\nimport './LandingPage.css';\nimport {Link} from 'react-router-dom';\n\n\nexport const LandingPage = () => {\n    return (\n        <div id=\"landing-page-main-background\">\n            <div id=\"landing-page-buttons-area\">\n                <Link to=\"/log-in\">\n                    <button id=\"landing-page-login-button\" className=\"landing-page-main-buttons\">\n                            Login\n                    </button>\n                </Link>\n                <Link to=\"sign-up\">\n                    <button id=\"landing-page-signup-button\" className=\"landing-page-main-buttons\">\n                            Sign Up\n                    </button>\n                </Link>\n            </div>\n        </div>\n    )\n}\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","export const BACKEND_URL = \"https://rsm-first-task.herokuapp.com\";","import axios from 'axios';\nimport { BACKEND_URL } from '../../constants';\n\n\nexport const SignInRequest = (data)=>{\n    return axios.post(`${BACKEND_URL}/auth/sign-in/`,data,{\n        headers: {\n        'content-type' : 'application/json'    \n        }\n    })\n\n};\n\n\n\nexport const SignUpRequest = (data)=>{\n    return axios.post(`${BACKEND_URL}/auth/sign-up/`,data,{\n        headers: {\n        'content-type' : 'application/json'    \n        }\n    })\n\n};\n\n\n","import {createSlice,createAsyncThunk} from \"@reduxjs/toolkit\";\nimport { SignInRequest, SignUpRequest } from \"./AuthAPI\";\n\nconst initialState = {\n    loggedIn : false,\n    userData : null,\n    token : null,\n}\n\n\nexport const SignInThunk = createAsyncThunk('auth/sign-in',async (data)=>{\n    const response = await SignInRequest(data);\n    return response.data;\n})\n\nexport const SignUpThunk = createAsyncThunk('auth/sign-up',async (data)=>{\n    const response = await SignUpRequest(data);\n    return response.data;\n})\n\n\n\n\nconst AuthSlice = createSlice({\n    name : \"Auth\",\n    initialState : initialState,\n    reducers : {\n      logout : (state,action)=>{\n          state.loggedIn = false;\n          state.userData = null;\n          state.token = null;\n      }\n    },\n    extraReducers : {\n        [SignUpThunk.fulfilled] : (state,action)=>{\n            const response = action.payload;\n            console.log(response);\n            if (response.success){\n                state.loggedIn = true;\n                state.userData = response.userData;\n                state.token = response.token;\n                console.log(\"Successfully signed up!\");\n            }else{\n                state = initialState;\n            }\n        },\n        [SignUpThunk.rejected] : (state,action)=>{\n            console.log(action.payload);\n            console.log(\"Sign up rejected!\");\n        },\n        [SignInThunk.fulfilled] : (state,action)=>{\n            const response = action.payload;\n            console.log(response);\n            if (response.success){\n                console.log(\"Successful sign in!\");\n                state.loggedIn = true;\n                state.userData = response.userData;\n                state.token = response.token;\n            }else{\n                console.log(\"Wrong credentials!\")\n            }\n            \n            \n        },\n\n        [SignInThunk.rejected] : (state,action)=>{\n            console.log(action.payload);\n            console.log(\"Sign in rejected!\");\n            state = initialState;\n        }\n    }\n});\n\n\nexport const {logout}  = AuthSlice.actions;\n\n\nexport default AuthSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport AuthReducer from \"../features/auth/AuthSlice\";\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    auth  : AuthReducer\n  },\n});\n","import React,{useState} from 'react';\nimport './LoginPage.css';\nimport {store} from '../../app/store';\nimport {SignInThunk} from '../../features/auth/AuthSlice';\nimport { Link, useHistory } from 'react-router-dom';\n\n\nexport const LoginPage = () => {\n    const history = useHistory();\n    const [email,setEmail] = useState(\"\");\n    const [password,setPassword] = useState(\"\");\n    const onButtonClick = async(e)=>{\n        e.preventDefault();\n        const result = await store.dispatch(SignInThunk({email:email,password:password}));\n        console.log(result);\n        if (result.payload.success){\n            \n            history.push('/home');\n        }else{\n            alert(\"Wrong Credentials!\")\n        }\n\n    };\n\n    const onEmailChange = (e)=>{\n           \n\n            \n                setEmail(e.target.value);\n            \n\n    };\n\n    const onPasswordChange = (e)=>{\n \n                setPassword(e.target.value);\n \n    }\n\n\n    return (\n        <div id=\"login-page-main-background\">\n                <form id=\"login-page-main-area\">\n                        <span id='login-page-heading-area'>\n                        <span className=\"login-page-main-heading\" id=\"LOG\">Log </span>\n                         <span className=\"login-page-main-heading\" id=\"IN\"> In</span>\n                       \n                        </span>\n                        \n                    <input onChange={onEmailChange} placeholder=\"john@mail.com\" id='login-input-email' required type=\"email\" className=\"login-page-input\"/>\n                    <input required type=\"password\" onChange={onPasswordChange} placeholder=\"**********\" id='login-input-password'  className=\"login-page-input\"/>\n\n                    <button onClick={onButtonClick} id=\"submit-button\">Submit</button>\n                    <Link style={{color:\"white\"}} to=\"/sign-up\">Don't have an account? Sign Up!</Link>\n                </form>\n        </div>\n    )\n}\n","import React,{useState} from 'react';\nimport {Form,Button} from 'react-bootstrap'; \nimport {store} from '../../app/store';\nimport {SignUpThunk} from '../../features/auth/AuthSlice';\nimport { Link,useHistory } from 'react-router-dom';\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport './SignUpPage.css';\n\n\n\nconst validationSchema = yup.object().shape({\n \n    email: yup.string()\n      .email(\"Invalid email format\")\n      .required(\"This is a required field\")\n      .strict(),\n    password : yup.string()\n    .min(8,'The password should be of minimum 8 characters!')\n    .required('This field is required!'),\n    password2 : yup.string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match'),\n    \n\n  \n  })\n  \n  const formInitialValues = {\n    email:'',\n    password:'',\n    password2:''\n  }\n\n\n\n\nexport const SignUpPage = () => {\n    const [email,setEmail] = useState(\"\");\n    const [password,setPassword] = useState(\"\");\n    const history = useHistory();\n\n\n  \n  \n\n\n    return (\n        <div id=\"signup-page-main-background\">\n                  <Formik\n            initialValues={formInitialValues}\n            validationSchema={validationSchema}\n            onSubmit={async(values) => {\n              const result = await store.dispatch(SignUpThunk(values));\n              console.log(result);\n              if (result.payload.success){\n\n                  history.push('/home')\n              }else{\n                alert(\"Error signing up!\")\n              }\n            }}>\n            {\n              ({ handleChange, handleBlur, handleSubmit, values, touched, errors }) => {\n                return (\n                <Form id=\"signup-page-main-area\">\n                        <span id='signup-page-heading-area'>\n                        <span className=\"signup-page-main-heading\" id=\"SIGN\">Sign </span>\n                         <span className=\"signup-page-main-heading\" id=\"UP\"> Up</span>\n                       \n                        </span>\n                        <Form.Group className=\"signup-page-form-group\">\n                    <Form.Control  placeholder=\"john@mail.com\" id='login-input-email' required type=\"email\"                          name=\"message\"\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          isInvalid={errors.email}\n                          name=\"email\"\n                             className=\"signup-page-input\"/>\n\n                        <Form.Control.Feedback type='invalid' className=\"ml-3\">\n                          {errors.email}\n                        </Form.Control.Feedback>\n                        </Form.Group>\n\n\n                        <Form.Group className=\"signup-page-form-group\">\n                        <Form.Control required type=\"password\"\n                    name=\"password\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        isInvalid={errors.password}\n                    placeholder=\"**********\" id='login-input-password' className=\"signup-page-input\"/>\n\n                        <Form.Control.Feedback type='invalid' className=\"ml-3\">       \n                          {errors.password}\n                        </Form.Control.Feedback>\n                        </Form.Group>\n                    \n                    <Form.Group className=\"signup-page-form-group\">\n                    <Form.Control required type=\"password\"\n                    name=\"password2\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        isInvalid={errors.password2}\n                    placeholder=\"**********\" id='login-input-password2' className=\"signup-page-input\"/>\n                        <Form.Control.Feedback type='invalid' className=\"ml-3\">       \n                          {errors.password2}\n                        </Form.Control.Feedback>\n\n\n                    </Form.Group>\n                    \n                    <Button onClick={(e)=>{\n                        e.preventDefault();\n                        handleSubmit();\n\n                    }} \n                    type=\"submit\"\n                    id=\"submit-button\">Submit</Button>\n                    <Link style={{color:\"white\"}} to=\"/log-in\">Already have an account? Sign In!</Link>\n                </Form>)\n              }}\n              </Formik>\n        </div>\n    )\n \n \n}\n\n\n \n","import React from 'react';\nimport './HomePage.css';\nimport {store} from '../../app/store';\nimport {useSelector} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\n\nexport const HomePage = () => {\n    const AuthData = useSelector(state=>state.auth);\n    const history = useHistory();\n\n\n    if (!AuthData.loggedIn){\n        alert(\"You need to be logged in to access this page!\")\n        history.push('/');\n    }\n\n    return ( \n        <div id='homepage-main-div'>\n            <div id=\"homepage-main-content\">\n                <h1>Hello</h1>\n                <h5>Your JWT Token </h5>\n                <p id=\"token-paragraph\">\n                {AuthData.token}\n                </p>\n            </div>\n            \n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport {Switch,Route,Redirect,BrowserRouter} from 'react-router-dom';\nimport { LandingPage } from './pages/landing/LandingPage';\nimport { LoginPage } from './pages/login/LoginPage';\nimport { SignUpPage } from './pages/signup/SignUpPage';\nimport { HomePage } from './pages/homepage/HomePage';\nimport {store} from './app/store';\nimport {useSelector} from 'react-redux';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App()\n{\n  const isLoggedIn = useSelector(state=>state.auth.isLoggedIn);\n\n  return (\n      <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/\" component={LandingPage}/>\n                <Route exact path=\"/log-in\" component={LoginPage}/>\n                <Route exact path=\"/sign-up\" component={SignUpPage}/>\n                <Route exact path=\"/home\" component={HomePage}/>\n                \n                <Redirect to=\"/\"/>\n\n\n            </Switch>\n\n\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <Provider store={store}>\n      <App />\n    </Provider>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}